service: serverless-rest-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: migrations
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true

  list:
    handler: users/list.list
    events:
      - http:
          path: users
          method: get
          cors: true

  get:
    handler: users/get.get
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer:
              name: authorizer
              resultTtlInSeconds: 0
              identitySource: method.request.header.Authorization
              type: request

  update:
    handler: users/update.update
    events:
      - http:
          path: users/{id}
          method: put
          cors: true

  delete:
    handler: users/delete.delete
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true

  authorizer:
      handler: authorizer.auth

resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: role
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
          -
            AttributeName: password
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: 'email_index'
            KeySchema:
            - AttributeName: 'email'
              KeyType: 'HASH'
            Projection:
              ProjectionType: "KEYS_ONLY"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
